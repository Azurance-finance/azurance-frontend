schema {
  query: Query
  subscription: Subscription
}

"Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive."
directive @entity on OBJECT

"Defined a Subgraph ID for an object type"
directive @subgraphId(id: String!) on OBJECT

"creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API."
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type InsurancePool {
  id: ID!
  multiplier: BigInt!
  multiplierDecimals: BigInt!
  maturityTimestamp: BigInt!
  staleTimestamp: BigInt!
  underlyingToken: Token!
  fee: BigInt!
  feeDecimals: BigInt!
  feeTo: Bytes!
  condition: Bytes!
  buyerToken: Token!
  sellerToken: Token!
  status: Int!
  buyerShares: BigInt!
  sellerShares: BigInt!
  totalShares: BigInt!
  buyerValue: BigInt!
  sellerValue: BigInt!
  totalValue: BigInt!
  createdAt: BigInt!
}

input InsurancePool_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  multiplier: BigInt
  multiplier_not: BigInt
  multiplier_gt: BigInt
  multiplier_lt: BigInt
  multiplier_gte: BigInt
  multiplier_lte: BigInt
  multiplier_in: [BigInt!]
  multiplier_not_in: [BigInt!]
  multiplierDecimals: BigInt
  multiplierDecimals_not: BigInt
  multiplierDecimals_gt: BigInt
  multiplierDecimals_lt: BigInt
  multiplierDecimals_gte: BigInt
  multiplierDecimals_lte: BigInt
  multiplierDecimals_in: [BigInt!]
  multiplierDecimals_not_in: [BigInt!]
  maturityTimestamp: BigInt
  maturityTimestamp_not: BigInt
  maturityTimestamp_gt: BigInt
  maturityTimestamp_lt: BigInt
  maturityTimestamp_gte: BigInt
  maturityTimestamp_lte: BigInt
  maturityTimestamp_in: [BigInt!]
  maturityTimestamp_not_in: [BigInt!]
  staleTimestamp: BigInt
  staleTimestamp_not: BigInt
  staleTimestamp_gt: BigInt
  staleTimestamp_lt: BigInt
  staleTimestamp_gte: BigInt
  staleTimestamp_lte: BigInt
  staleTimestamp_in: [BigInt!]
  staleTimestamp_not_in: [BigInt!]
  underlyingToken: String
  underlyingToken_not: String
  underlyingToken_gt: String
  underlyingToken_lt: String
  underlyingToken_gte: String
  underlyingToken_lte: String
  underlyingToken_in: [String!]
  underlyingToken_not_in: [String!]
  underlyingToken_contains: String
  underlyingToken_contains_nocase: String
  underlyingToken_not_contains: String
  underlyingToken_not_contains_nocase: String
  underlyingToken_starts_with: String
  underlyingToken_starts_with_nocase: String
  underlyingToken_not_starts_with: String
  underlyingToken_not_starts_with_nocase: String
  underlyingToken_ends_with: String
  underlyingToken_ends_with_nocase: String
  underlyingToken_not_ends_with: String
  underlyingToken_not_ends_with_nocase: String
  underlyingToken_: Token_filter
  fee: BigInt
  fee_not: BigInt
  fee_gt: BigInt
  fee_lt: BigInt
  fee_gte: BigInt
  fee_lte: BigInt
  fee_in: [BigInt!]
  fee_not_in: [BigInt!]
  feeDecimals: BigInt
  feeDecimals_not: BigInt
  feeDecimals_gt: BigInt
  feeDecimals_lt: BigInt
  feeDecimals_gte: BigInt
  feeDecimals_lte: BigInt
  feeDecimals_in: [BigInt!]
  feeDecimals_not_in: [BigInt!]
  feeTo: Bytes
  feeTo_not: Bytes
  feeTo_gt: Bytes
  feeTo_lt: Bytes
  feeTo_gte: Bytes
  feeTo_lte: Bytes
  feeTo_in: [Bytes!]
  feeTo_not_in: [Bytes!]
  feeTo_contains: Bytes
  feeTo_not_contains: Bytes
  condition: Bytes
  condition_not: Bytes
  condition_gt: Bytes
  condition_lt: Bytes
  condition_gte: Bytes
  condition_lte: Bytes
  condition_in: [Bytes!]
  condition_not_in: [Bytes!]
  condition_contains: Bytes
  condition_not_contains: Bytes
  buyerToken: String
  buyerToken_not: String
  buyerToken_gt: String
  buyerToken_lt: String
  buyerToken_gte: String
  buyerToken_lte: String
  buyerToken_in: [String!]
  buyerToken_not_in: [String!]
  buyerToken_contains: String
  buyerToken_contains_nocase: String
  buyerToken_not_contains: String
  buyerToken_not_contains_nocase: String
  buyerToken_starts_with: String
  buyerToken_starts_with_nocase: String
  buyerToken_not_starts_with: String
  buyerToken_not_starts_with_nocase: String
  buyerToken_ends_with: String
  buyerToken_ends_with_nocase: String
  buyerToken_not_ends_with: String
  buyerToken_not_ends_with_nocase: String
  buyerToken_: Token_filter
  sellerToken: String
  sellerToken_not: String
  sellerToken_gt: String
  sellerToken_lt: String
  sellerToken_gte: String
  sellerToken_lte: String
  sellerToken_in: [String!]
  sellerToken_not_in: [String!]
  sellerToken_contains: String
  sellerToken_contains_nocase: String
  sellerToken_not_contains: String
  sellerToken_not_contains_nocase: String
  sellerToken_starts_with: String
  sellerToken_starts_with_nocase: String
  sellerToken_not_starts_with: String
  sellerToken_not_starts_with_nocase: String
  sellerToken_ends_with: String
  sellerToken_ends_with_nocase: String
  sellerToken_not_ends_with: String
  sellerToken_not_ends_with_nocase: String
  sellerToken_: Token_filter
  status: Int
  status_not: Int
  status_gt: Int
  status_lt: Int
  status_gte: Int
  status_lte: Int
  status_in: [Int!]
  status_not_in: [Int!]
  buyerShares: BigInt
  buyerShares_not: BigInt
  buyerShares_gt: BigInt
  buyerShares_lt: BigInt
  buyerShares_gte: BigInt
  buyerShares_lte: BigInt
  buyerShares_in: [BigInt!]
  buyerShares_not_in: [BigInt!]
  sellerShares: BigInt
  sellerShares_not: BigInt
  sellerShares_gt: BigInt
  sellerShares_lt: BigInt
  sellerShares_gte: BigInt
  sellerShares_lte: BigInt
  sellerShares_in: [BigInt!]
  sellerShares_not_in: [BigInt!]
  totalShares: BigInt
  totalShares_not: BigInt
  totalShares_gt: BigInt
  totalShares_lt: BigInt
  totalShares_gte: BigInt
  totalShares_lte: BigInt
  totalShares_in: [BigInt!]
  totalShares_not_in: [BigInt!]
  buyerValue: BigInt
  buyerValue_not: BigInt
  buyerValue_gt: BigInt
  buyerValue_lt: BigInt
  buyerValue_gte: BigInt
  buyerValue_lte: BigInt
  buyerValue_in: [BigInt!]
  buyerValue_not_in: [BigInt!]
  sellerValue: BigInt
  sellerValue_not: BigInt
  sellerValue_gt: BigInt
  sellerValue_lt: BigInt
  sellerValue_gte: BigInt
  sellerValue_lte: BigInt
  sellerValue_in: [BigInt!]
  sellerValue_not_in: [BigInt!]
  totalValue: BigInt
  totalValue_not: BigInt
  totalValue_gt: BigInt
  totalValue_lt: BigInt
  totalValue_gte: BigInt
  totalValue_lte: BigInt
  totalValue_in: [BigInt!]
  totalValue_not_in: [BigInt!]
  createdAt: BigInt
  createdAt_not: BigInt
  createdAt_gt: BigInt
  createdAt_lt: BigInt
  createdAt_gte: BigInt
  createdAt_lte: BigInt
  createdAt_in: [BigInt!]
  createdAt_not_in: [BigInt!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [InsurancePool_filter]
  or: [InsurancePool_filter]
}

enum InsurancePool_orderBy {
  id
  multiplier
  multiplierDecimals
  maturityTimestamp
  staleTimestamp
  underlyingToken
  underlyingToken__id
  underlyingToken__name
  underlyingToken__symbol
  underlyingToken__decimals
  fee
  feeDecimals
  feeTo
  condition
  buyerToken
  buyerToken__id
  buyerToken__name
  buyerToken__symbol
  buyerToken__decimals
  sellerToken
  sellerToken__id
  sellerToken__name
  sellerToken__symbol
  sellerToken__decimals
  status
  buyerShares
  sellerShares
  totalShares
  buyerValue
  sellerValue
  totalValue
  createdAt
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  insurancePool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): InsurancePool
  insurancePools(
    skip: Int = 0
    first: Int = 100
    orderBy: InsurancePool_orderBy
    orderDirection: OrderDirection
    where: InsurancePool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [InsurancePool!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  insurancePool(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): InsurancePool
  insurancePools(
    skip: Int = 0
    first: Int = 100
    orderBy: InsurancePool_orderBy
    orderDirection: OrderDirection
    where: InsurancePool_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [InsurancePool!]!
  token(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Token
  tokens(
    skip: Int = 0
    first: Int = 100
    orderBy: Token_orderBy
    orderDirection: OrderDirection
    where: Token_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [Token!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Token {
  id: ID!
  name: String!
  symbol: String!
  decimals: Int!
}

input Token_filter {
  id: ID
  id_not: ID
  id_gt: ID
  id_lt: ID
  id_gte: ID
  id_lte: ID
  id_in: [ID!]
  id_not_in: [ID!]
  name: String
  name_not: String
  name_gt: String
  name_lt: String
  name_gte: String
  name_lte: String
  name_in: [String!]
  name_not_in: [String!]
  name_contains: String
  name_contains_nocase: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  symbol: String
  symbol_not: String
  symbol_gt: String
  symbol_lt: String
  symbol_gte: String
  symbol_lte: String
  symbol_in: [String!]
  symbol_not_in: [String!]
  symbol_contains: String
  symbol_contains_nocase: String
  symbol_not_contains: String
  symbol_not_contains_nocase: String
  symbol_starts_with: String
  symbol_starts_with_nocase: String
  symbol_not_starts_with: String
  symbol_not_starts_with_nocase: String
  symbol_ends_with: String
  symbol_ends_with_nocase: String
  symbol_not_ends_with: String
  symbol_not_ends_with_nocase: String
  decimals: Int
  decimals_not: Int
  decimals_gt: Int
  decimals_lt: Int
  decimals_gte: Int
  decimals_lte: Int
  decimals_in: [Int!]
  decimals_not_in: [Int!]
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Token_filter]
  or: [Token_filter]
}

enum Token_orderBy {
  id
  name
  symbol
  decimals
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}